import numpy as np

def monte_carlo_simulation(initial_investment, expected_return, volatility, time_horizon, num_simulations):
    # Calculate daily returns based on the provided expected return and volatility
    daily_returns = np.random.normal(expected_return / 252, volatility / np.sqrt(252), (time_horizon, num_simulations))
    print('daily_return:' ,daily_returns.shape)
    
    # Initialize array to store portfolio values for each simulation
    portfolio_values = np.zeros((time_horizon, num_simulations))
    print(portfolio_values)
    portfolio_values[0] = initial_investment  # Set initial portfolio value
    
    # Perform Monte Carlo simulation
    for t in range(1, time_horizon):
        portfolio_values[t] = portfolio_values[t - 1] * (1 + daily_returns[t])
    print(portfolio_values)
    
    return portfolio_values

# Example parameters
initial_investment = 100000  # Initial investment amount
expected_return = 0.08       # Expected annual return (8%)
volatility = 0.15            # Volatility (standard deviation of returns)
time_horizon = 252           # Number of trading days in a year
num_simulations = 1000       # Number of simulation runs

# Perform Monte Carlo simulation
simulation_results = monte_carlo_simulation(initial_investment, expected_return, volatility, time_horizon, num_simulations)

# Calculate portfolio statistics
final_portfolio_values = simulation_results[-1]
mean_portfolio_value = np.mean(final_portfolio_values)
median_portfolio_value = np.median(final_portfolio_values)
percentile_10th = np.percentile(final_portfolio_values, 10)
percentile_90th = np.percentile(final_portfolio_values, 90)

# Print portfolio statistics
print("Mean final portfolio value:", mean_portfolio_value)
print("Median final portfolio value:", median_portfolio_value)
print("10th percentile of final portfolio value:", percentile_10th)
print("90th percentile of final portfolio value:", percentile_90th)
